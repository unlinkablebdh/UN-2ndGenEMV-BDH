Linear part:
smult(a,smult(b,G)) = smult(b,smult(a,G))
smult(a,smult(b,smult(c,G))) = smult(b,smult(a,smult(c,G)))
Completing equations...
Completed equations:
smult(c,smult(a,smult(b,G))) = smult(b,smult(a,smult(c,G)))
smult(a,smult(a_1,smult(b,G))) = smult(b,smult(a,smult(a_1,G)))
smult(a,smult(b,smult(b_1,G))) = smult(b,smult(b_1,smult(a,G)))
smult(a,smult(b,smult(c,G))) = smult(b,smult(a,smult(c,G)))
smult(a,smult(b,G)) = smult(b,smult(a,G))
Convergent part:
Completing equations...
Completed equations:
Process 0 (that is, the initial process):
{1}new s: sskey;
{2}out(cout, pk(s));
(
    {3}!
    {4}let s_1: sskey = s in
    {5}new c: scalar;
    {6}!
    {7}new chc: channel;
    {8}out(card, chc);
    {9}let c_1: scalar = c in
    {10}let ch: channel = chc in
    {11}new a: scalar;
    {12}event snd1(smult(a,smult(c_1,G)));
    {13}out(ch, smult(a,smult(c_1,G)));
    {14}in(ch, y: point);
    {15}event rec2(y);
    {16}let k: key = h(smult(a,smult(c_1,y))) in
    {17}let m: bitstring = (smult(a,smult(c_1,G)),smult(a,sign(smult(c_1,G),s_1))) in
    {18}event cardTerm(k,enc(m,k));
    {19}out(ch, enc(m,k))
) | (
    {20}!
    {21}let s_2: sskey = s in
    {22}new cht: channel;
    {23}out(term, cht);
    {24}let ch_1: channel = cht in
    {25}new t: scalar;
    {26}in(ch_1, z1: point);
    {27}event rec1(z1);
    {28}event snd2(smult(t,G));
    {29}out(ch_1, smult(t,G));
    {30}in(ch_1, z2: bitstring);
    {31}let k_1: key = h(smult(t,z1)) in
    {32}let (m1: point,m2: point) = dec(z2,k_1) in
    {33}if ((m1 = check(m2,pk(s_2))) && (m1 = z1)) then
    {34}event terminalTerm(k_1,z2)
)

--  Process 1 (that is, process 0, with let moved downwards):
{1}new s: sskey;
{2}out(cout, pk(s));
(
    {3}!
    {5}new c: scalar;
    {6}!
    {7}new chc: channel;
    {8}out(card, chc);
    {11}new a: scalar;
    {9}let c_1: scalar = c in
    {12}event snd1(smult(a,smult(c_1,G)));
    {10}let ch: channel = chc in
    {13}out(ch, smult(a,smult(c_1,G)));
    {14}in(ch, y: point);
    {15}event rec2(y);
    {4}let s_1: sskey = s in
    {17}let m: bitstring = (smult(a,smult(c_1,G)),smult(a,sign(smult(c_1,G),s_1))) in
    {16}let k: key = h(smult(a,smult(c_1,y))) in
    {18}event cardTerm(k,enc(m,k));
    {19}out(ch, enc(m,k))
) | (
    {20}!
    {22}new cht: channel;
    {23}out(term, cht);
    {25}new t: scalar;
    {24}let ch_1: channel = cht in
    {26}in(ch_1, z1: point);
    {27}event rec1(z1);
    {28}event snd2(smult(t,G));
    {29}out(ch_1, smult(t,G));
    {30}in(ch_1, z2: bitstring);
    {31}let k_1: key = h(smult(t,z1)) in
    {32}let (m1: point,m2: point) = dec(z2,k_1) in
    {21}let s_2: sskey = s in
    {33}if ((m1 = check(m2,pk(s_2))) && (m1 = z1)) then
    {34}event terminalTerm(k_1,z2)
)

-- Query not event(terminalTerm(k_2,z2_1)) in process 1.
Translating the process into Horn clauses...
nounif mess(chc[!2 = *@sid,!1 = *@sid_1],y_1)/-5000
Completing...
200 rules inserted. Base: 156 rules (43 with conclusion selected). Queue: 49 rules.
400 rules inserted. Base: 267 rules (101 with conclusion selected). Queue: 71 rules.
600 rules inserted. Base: 347 rules (123 with conclusion selected). Queue: 86 rules.
Starting query not event(terminalTerm(k_2,z2_1))
goal reachable: end(terminalTerm(h(smult(c_2,smult(t_1,smult(a_1,G)))),enc((smult(c_2,smult(a_1,G)),smult(a_1,sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G)))))))
Abbreviations:
c_2 = c[!1 = @sid]
t_1 = t[!1 = @sid_1]
a_1 = a[!2 = @sid_2,!1 = @sid]

Derivation:
Abbreviations:
c_2 = c[!1 = @sid]
t_1 = t[!1 = @sid_1]
a_1 = a[!2 = @sid_2,!1 = @sid]
cht_1 = cht[!1 = @sid_1]
chc_1 = chc[!2 = @sid_2,!1 = @sid]

1. The message chc_1 may be sent to the attacker at output {8}.
attacker(chc_1).

2. The message smult(c_2,smult(a_1,G)) may be sent on channel chc_1 at output {13}.
mess(chc_1,smult(c_2,smult(a_1,G))).

3. By 1, the attacker may have the channel chc_1.
By 2, the message smult(c_2,smult(a_1,G)) may be sent on this channel.
So the attacker may obtain the message smult(c_2,smult(a_1,G)) by listening on this channel.
attacker(smult(c_2,smult(a_1,G))).

4. The message cht_1 may be sent to the attacker at output {23}.
attacker(cht_1).

5. By 4, the attacker may have the channel cht_1.
By 3, the attacker may have the message smult(c_2,smult(a_1,G)).
So the attacker may send this message on this channel.
mess(cht_1,smult(c_2,smult(a_1,G))).

6. The attacker has some term z1_1.
attacker(z1_1).

7. By 4, the attacker may have the channel cht_1.
By 6, the attacker may have the message z1_1.
So the attacker may send this message on this channel.
mess(cht_1,z1_1).

8. The message z1_1 that may be sent on channel cht_1 by 7 may be received at input {26}.
So the message smult(t_1,G) may be sent on channel cht_1 at output {29}.
mess(cht_1,smult(t_1,G)).

9. By 4, the attacker may have the channel cht_1.
By 8, the message smult(t_1,G) may be sent on this channel.
So the attacker may obtain the message smult(t_1,G) by listening on this channel.
attacker(smult(t_1,G)).

10. By 1, the attacker may have the channel chc_1.
By 9, the attacker may have the message smult(t_1,G).
So the attacker may send this message on this channel.
mess(chc_1,smult(t_1,G)).

11. The message smult(t_1,G) that may be sent on channel chc_1 by 10 may be received at input {14}.
So the message enc((smult(c_2,smult(a_1,G)),smult(a_1,sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G))))) may be sent on channel chc_1 at output {19}.
mess(chc_1,enc((smult(c_2,smult(a_1,G)),smult(a_1,sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G)))))).

12. By 1, the attacker may have the channel chc_1.
By 11, the message enc((smult(c_2,smult(a_1,G)),smult(a_1,sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G))))) may be sent on this channel.
So the attacker may obtain the message enc((smult(c_2,smult(a_1,G)),smult(a_1,sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G))))) by listening on this channel.
attacker(enc((smult(c_2,smult(a_1,G)),smult(a_1,sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G)))))).

13. By 4, the attacker may have the channel cht_1.
By 12, the attacker may have the message enc((smult(c_2,smult(a_1,G)),smult(a_1,sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G))))).
So the attacker may send this message on this channel.
mess(cht_1,enc((smult(c_2,smult(a_1,G)),smult(a_1,sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G)))))).

14. The message smult(c_2,smult(a_1,G)) that may be sent on channel cht_1 by 5 may be received at input {26}.
The message enc((smult(c_2,smult(a_1,G)),smult(a_1,sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G))))) that may be sent on channel cht_1 by 13 may be received at input {30}.
So event terminalTerm(h(smult(c_2,smult(t_1,smult(a_1,G)))),enc((smult(c_2,smult(a_1,G)),smult(a_1,sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G)))))) may be executed at {34}.
end(terminalTerm(h(smult(c_2,smult(t_1,smult(a_1,G)))),enc((smult(c_2,smult(a_1,G)),smult(a_1,sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G))))))).

15. By 14, end(terminalTerm(h(smult(c_2,smult(t_1,smult(a_1,G)))),enc((smult(c_2,smult(a_1,G)),smult(a_1,sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G))))))).
The goal is reached, represented in the following fact:
end(terminalTerm(h(smult(c_2,smult(t_1,smult(a_1,G)))),enc((smult(c_2,smult(a_1,G)),smult(a_1,sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G))))))).


Unified z1_1 with smult(c[!1 = @sid],smult(a[!2 = @sid_2,!1 = @sid],G))
Iterating unifyDerivation.
Fixpoint reached: nothing more to unify.
The clause after unifyDerivation is
end(terminalTerm(h(smult(c[!1 = @sid],smult(t[!1 = @sid_1],smult(a[!2 = @sid_2,!1 = @sid],G)))),enc((smult(c[!1 = @sid],smult(a[!2 = @sid_2,!1 = @sid],G)),smult(a[!2 = @sid_2,!1 = @sid],sign(smult(c[!1 = @sid],G),s[]))),h(smult(c[!1 = @sid],smult(t[!1 = @sid_1],smult(a[!2 = @sid_2,!1 = @sid],G)))))))
This clause still contradicts the query.
A more detailed output of the traces is available with
  set traceDisplay = long.

new s: sskey creating s_3 at {1}

out(cout, ~M) with ~M = pk(s_3) at {2}

new cht: channel creating cht_1 at {22} in copy a_1

out(term, ~M_1) with ~M_1 = cht_1 at {23} in copy a_1

new t: scalar creating t_1 at {25} in copy a_1

new c: scalar creating c_2 at {5} in copy a_2

new chc: channel creating chc_1 at {7} in copy a_2, a_3

out(card, ~M_2) with ~M_2 = chc_1 at {8} in copy a_2, a_3

new a: scalar creating a_4 at {11} in copy a_2, a_3

event snd1(smult(a_4,smult(c_2,G))) at {12} in copy a_2, a_3

out(chc_1, ~M_3) with ~M_3 = smult(a_4,smult(c_2,G)) at {13} in copy a_2, a_3

in(cht_1, ~M_3) with ~M_3 = smult(c_2,smult(a_4,G)) at {26} in copy a_1

event rec1(smult(c_2,smult(a_4,G))) at {27} in copy a_1

event snd2(smult(t_1,G)) at {28} in copy a_1

out(cht_1, ~M_4) with ~M_4 = smult(t_1,G) at {29} in copy a_1

in(chc_1, ~M_4) with ~M_4 = smult(t_1,G) at {14} in copy a_2, a_3

event rec2(smult(t_1,G)) at {15} in copy a_2, a_3

event cardTerm(h(smult(a_4,smult(c_2,smult(t_1,G)))),enc((smult(a_4,smult(c_2,G)),smult(a_4,sign(smult(c_2,G),s_3))),h(smult(a_4,smult(c_2,smult(t_1,G)))))) at {18} in copy a_2, a_3

out(chc_1, ~M_5) with ~M_5 = enc((smult(a_4,smult(c_2,G)),smult(a_4,sign(smult(c_2,G),s_3))),h(smult(a_4,smult(c_2,smult(t_1,G))))) at {19} in copy a_2, a_3

in(cht_1, ~M_5) with ~M_5 = enc((smult(c_2,smult(a_4,G)),smult(a_4,sign(smult(c_2,G),s_3))),h(smult(c_2,smult(t_1,smult(a_4,G))))) at {30} in copy a_1

event terminalTerm(h(smult(t_1,smult(c_2,smult(a_4,G)))),enc((smult(c_2,smult(a_4,G)),smult(a_4,sign(smult(c_2,G),s_3))),h(smult(c_2,smult(t_1,smult(a_4,G)))))) at {34} in copy a_1 (goal)

The event terminalTerm(h(smult(c_2,smult(t_1,smult(a_4,G)))),enc((smult(c_2,smult(a_4,G)),smult(a_4,sign(smult(c_2,G),s_3))),h(smult(c_2,smult(t_1,smult(a_4,G)))))) is executed at {34} in copy a_1.
A trace has been found.
RESULT not event(terminalTerm(k_2,z2_1)) is false.
-- Query inj-event(terminalTerm(k_2,z2_1)) ==> (inj-event(rec1(z1_1)) ==> inj-event(snd1(z1_1))) in process 1.
Translating the process into Horn clauses...
nounif mess(chc[!2 = *@sid,!1 = *@sid_1],y_1)/-5000
Completing...
200 rules inserted. Base: 181 rules (53 with conclusion selected). Queue: 90 rules.
400 rules inserted. Base: 261 rules (99 with conclusion selected). Queue: 145 rules.
600 rules inserted. Base: 410 rules (205 with conclusion selected). Queue: 211 rules.
800 rules inserted. Base: 474 rules (232 with conclusion selected). Queue: 260 rules.
1000 rules inserted. Base: 653 rules (344 with conclusion selected). Queue: 216 rules.
1200 rules inserted. Base: 732 rules (349 with conclusion selected). Queue: 224 rules.
1400 rules inserted. Base: 878 rules (400 with conclusion selected). Queue: 288 rules.
1600 rules inserted. Base: 990 rules (402 with conclusion selected). Queue: 331 rules.
1800 rules inserted. Base: 1124 rules (420 with conclusion selected). Queue: 253 rules.
2000 rules inserted. Base: 1156 rules (420 with conclusion selected). Queue: 187 rules.
2200 rules inserted. Base: 1256 rules (420 with conclusion selected). Queue: 68 rules.
Starting query inj-event(terminalTerm(k_2,z2_1)) ==> (inj-event(rec1(z1_1)) ==> inj-event(snd1(z1_1)))
goal reachable: begin(@p_act(@occ14_1,smult(t_1,G))) && begin(@p_act(@occ30_1,enc((smult(c_2,smult(a_1,G)),smult(a_1,sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G))))))) && begin(rec1(smult(c_2,smult(a_1,G))),@occ27_1) && begin(snd1(smult(c_2,smult(a_1,G))),@occ12_1) -> end(@occ34_1,terminalTerm(h(smult(c_2,smult(t_1,smult(a_1,G)))),enc((smult(c_2,smult(a_1,G)),smult(a_1,sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G)))))))
The 1st, 2nd, 3rd, 4th hypotheses occur strictly before the conclusion.
Abbreviations:
c_2 = c[!1 = @sid]
a_1 = a[!2 = @sid_1,!1 = @sid]
t_1 = t[!1 = @sid_2]
@occ34_1 = @occ34[z2 = enc((smult(c_2,smult(a_1,G)),smult(a_1,sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G))))),z1 = smult(c_2,smult(a_1,G)),!1 = @sid_2]
@occ14_1 = @occ14[!2 = @sid_1,!1 = @sid]
@occ30_1 = @occ30[!1 = @sid_2]
@occ27_1 = @occ27[z1 = smult(c_2,smult(a_1,G)),!1 = @sid_2]
@occ12_1 = @occ12[!2 = @sid_1,!1 = @sid]
goal reachable: begin(@p_act(@occ14_1,smult(t_1,G))) && begin(@p_act(@occ30_1,enc((smult(c_2,smult(a_1,G)),smult(a_1,sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G))))))) && begin(rec1(smult(c_2,smult(a_1,G))),@occ27_1) && begin(snd1(smult(c_2,smult(a_1,G))),@occ12_1) && begin(snd1(smult(a_1,smult(c_2,G))),@occ12_1) -> end(@occ34_1,terminalTerm(h(smult(c_2,smult(t_1,smult(a_1,G)))),enc((smult(c_2,smult(a_1,G)),smult(a_1,sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G))))))) && end(@occ27_1,rec1(smult(c_2,smult(a_1,G))))
The 1st, 2nd, 3rd, 4th, 5th hypotheses occur strictly before the 1st conclusion.
The 5th hypothesis occurs strictly before the 2nd conclusion.
Abbreviations:
c_2 = c[!1 = @sid]
a_1 = a[!2 = @sid_1,!1 = @sid]
t_1 = t[!1 = @sid_2]
@occ34_1 = @occ34[z2 = enc((smult(c_2,smult(a_1,G)),smult(a_1,sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G))))),z1 = smult(c_2,smult(a_1,G)),!1 = @sid_2]
@occ27_1 = @occ27[z1 = smult(c_2,smult(a_1,G)),!1 = @sid_2]
@occ14_1 = @occ14[!2 = @sid_1,!1 = @sid]
@occ30_1 = @occ30[!1 = @sid_2]
@occ12_1 = @occ12[!2 = @sid_1,!1 = @sid]
RESULT inj-event(terminalTerm(k_2,z2_1)) ==> (inj-event(rec1(z1_1)) ==> inj-event(snd1(z1_1))) is true.
-- Query inj-event(terminalTerm(k_2,z2_1)) ==> (inj-event(rec2(y_1)) ==> inj-event(snd2(y_1))) in process 1.
Translating the process into Horn clauses...
nounif mess(chc[!2 = *@sid,!1 = *@sid_1],y_1)/-5000
Completing...
200 rules inserted. Base: 153 rules (39 with conclusion selected). Queue: 71 rules.
400 rules inserted. Base: 253 rules (87 with conclusion selected). Queue: 127 rules.
600 rules inserted. Base: 359 rules (130 with conclusion selected). Queue: 118 rules.
800 rules inserted. Base: 471 rules (157 with conclusion selected). Queue: 168 rules.
1000 rules inserted. Base: 563 rules (167 with conclusion selected). Queue: 128 rules.
1200 rules inserted. Base: 653 rules (175 with conclusion selected). Queue: 4 rules.
Starting query inj-event(terminalTerm(k_2,z2_1)) ==> (inj-event(rec2(y_1)) ==> inj-event(snd2(y_1)))
goal reachable: begin(rec2(smult(t_1,G)),@occ15_1) && begin(@p_act(@occ30_2,enc((smult(c_2,smult(a_1,G)),smult(a_1,sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G))))))) && begin(snd2(smult(t_1,G)),@occ28_1) -> end(@occ34_2,terminalTerm(h(smult(c_2,smult(t_1,smult(a_1,G)))),enc((smult(c_2,smult(a_1,G)),smult(a_1,sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G)))))))
The 1st, 2nd, 3rd hypotheses occur strictly before the conclusion.
Abbreviations:
c_2 = c[!1 = @sid]
a_1 = a[!2 = @sid_1,!1 = @sid]
t_1 = t[!1 = @sid_2]
@occ34_2 = @occ34_1[z2 = enc((smult(c_2,smult(a_1,G)),smult(a_1,sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G))))),z1 = smult(c_2,smult(a_1,G)),!1 = @sid_2]
@occ15_1 = @occ15[y = smult(t_1,G),!2 = @sid_1,!1 = @sid]
@occ30_2 = @occ30_1[!1 = @sid_2]
@occ28_1 = @occ28[z1 = smult(c_2,smult(a_1,G)),!1 = @sid_2]
goal reachable: begin(rec2(smult(t_1,G)),@occ15_1) && begin(@p_act(@occ30_2,enc((smult(c_2,smult(a_1,G)),smult(a_1,sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G))))))) && begin(snd2(smult(t_1,G)),@occ28_1) && begin(snd2(smult(t_1,G)),@occ28_2) && attacker(z1_1) -> end(@occ34_2,terminalTerm(h(smult(c_2,smult(t_1,smult(a_1,G)))),enc((smult(c_2,smult(a_1,G)),smult(a_1,sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G))))))) && end(@occ15_1,rec2(smult(t_1,G)))
The 1st, 2nd, 3rd, 4th, 5th hypotheses occur strictly before the 1st conclusion.
The 4th hypothesis occurs strictly before the 2nd conclusion.
The 5th hypothesis occurs before the 2nd conclusion.
Abbreviations:
c_2 = c[!1 = @sid]
a_1 = a[!2 = @sid_1,!1 = @sid]
t_1 = t[!1 = @sid_2]
@occ34_2 = @occ34_1[z2 = enc((smult(c_2,smult(a_1,G)),smult(a_1,sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G))))),z1 = smult(c_2,smult(a_1,G)),!1 = @sid_2]
@occ15_1 = @occ15[y = smult(t_1,G),!2 = @sid_1,!1 = @sid]
@occ30_2 = @occ30_1[!1 = @sid_2]
@occ28_1 = @occ28[z1 = smult(c_2,smult(a_1,G)),!1 = @sid_2]
@occ28_2 = @occ28[z1 = z1_1,!1 = @sid_2]
RESULT inj-event(terminalTerm(k_2,z2_1)) ==> (inj-event(rec2(y_1)) ==> inj-event(snd2(y_1))) is true.
-- Query inj-event(terminalTerm(k_2,z2_1)) ==> inj-event(cardTerm(k_2,z2_1)) in process 1.
Translating the process into Horn clauses...
nounif mess(chc[!2 = *@sid,!1 = *@sid_1],y_1)/-5000
Completing...
200 rules inserted. Base: 152 rules (39 with conclusion selected). Queue: 71 rules.
400 rules inserted. Base: 264 rules (83 with conclusion selected). Queue: 123 rules.
600 rules inserted. Base: 385 rules (128 with conclusion selected). Queue: 151 rules.
800 rules inserted. Base: 466 rules (147 with conclusion selected). Queue: 281 rules.
1000 rules inserted. Base: 582 rules (169 with conclusion selected). Queue: 421 rules.
1200 rules inserted. Base: 678 rules (180 with conclusion selected). Queue: 499 rules.
1400 rules inserted. Base: 774 rules (180 with conclusion selected). Queue: 475 rules.
1600 rules inserted. Base: 826 rules (180 with conclusion selected). Queue: 483 rules.
1800 rules inserted. Base: 874 rules (180 with conclusion selected). Queue: 437 rules.
2000 rules inserted. Base: 938 rules (180 with conclusion selected). Queue: 385 rules.
2200 rules inserted. Base: 1051 rules (180 with conclusion selected). Queue: 275 rules.
2400 rules inserted. Base: 1165 rules (180 with conclusion selected). Queue: 177 rules.
2600 rules inserted. Base: 1301 rules (188 with conclusion selected). Queue: 54 rules.
Starting query inj-event(terminalTerm(k_2,z2_1)) ==> inj-event(cardTerm(k_2,z2_1))
goal reachable: begin(cardTerm(h(smult(c_2,smult(t_1,smult(a_1,G)))),enc((smult(c_2,smult(a_1,G)),smult(a_1,sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G)))))),@occ18_1) -> end(@occ34_3,terminalTerm(h(smult(c_2,smult(t_1,smult(a_1,G)))),enc((smult(c_2,smult(a_1,G)),smult(a_1,sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G)))))))
The hypothesis occurs strictly before the conclusion.
Abbreviations:
c_2 = c[!1 = @sid]
a_1 = a[!2 = @sid_1,!1 = @sid]
t_1 = t[!1 = @sid_2]
@occ34_3 = @occ34_2[z2 = enc((smult(c_2,smult(a_1,G)),smult(a_1,sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G))))),z1 = smult(c_2,smult(a_1,G)),!1 = @sid_2]
@occ18_1 = @occ18[y = smult(t_1,G),!2 = @sid_1,!1 = @sid]
RESULT inj-event(terminalTerm(k_2,z2_1)) ==> inj-event(cardTerm(k_2,z2_1)) is true.

--------------------------------------------------------------
Verification summary:

Query not event(terminalTerm(k_2,z2_1)) is false.

Query inj-event(terminalTerm(k_2,z2_1)) ==> (inj-event(rec1(z1_1)) ==> inj-event(snd1(z1_1))) is true.

Query inj-event(terminalTerm(k_2,z2_1)) ==> (inj-event(rec2(y_1)) ==> inj-event(snd2(y_1))) is true.

Query inj-event(terminalTerm(k_2,z2_1)) ==> inj-event(cardTerm(k_2,z2_1)) is true.

--------------------------------------------------------------